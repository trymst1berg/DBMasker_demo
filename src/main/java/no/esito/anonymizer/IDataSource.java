/*
 * Copyright (c) 2005-2020 Esito AS. All rights reserved.
 */
package no.esito.anonymizer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import no.esito.anonymizer.core.ArrayKey;

/**
 * Media interface
 */
public interface IDataSource {
    // Media to use SQL, CSV, JSON etc
    
    
    
    /**
     * Reads rows with a list of columns from table using specified where clause.
     *
     * @param table name
     * @param columns list of column names
     * @param where string - can be null
     * @return List of rows - each row is a String array
     * @throws Exception 
     */
    List<String[]> dsReadRows(String table, List<String> columns, String where) throws Exception;
    
    
    
    /**
     * Updates rows from a list of columns from table using specified where clause.
     *
     * @param table name
     * @param columns list of column names
     * @param updatecolumns columns to be updated
     * @param rows data rows
     * @param where string clause
     * @throws Exception when SQL issues
     */
    void dsUpdateRows(String table, List<IColumn> columns, IColumn[] index, Collection<String> updatecolumns, List<String[]> rows, String where) throws Exception;

    
    
    /**
     * Updates rows with a list of columns from table using specified where clause.
     *
     * @param table
     * @param columns
     * @param updatecolumns list of names
     * @param rows data to update
     * @param where Array of [index-column,rows]
     * @throws Throwable 
     */
    void dsUpdateRows(String table, IColumn[] columns, IColumn[] index, List<String> updatecolumns, List<String[]> rows, String[][] where)
        throws Throwable;    
    
    /**
     * Updates rows with a list of columns from table using specified where clause.
     *
     * @param columns column definitions
     * @param updatecolumns list of names
     * @param rows data to update
     * @throws Exception when SQL issues
     */
    void dsUpdateRowsNoIndex(String table, IColumn[] columns, List<String> updatecolumns,
        List<String[]> rows) throws Exception;
    
    
    /**
     * Update a key column needs to update all related references.
     *
     * @param colnames list of columns
     * @param updatecolumns c\list of column names to be updated
     * @param rows data
     * @param keys keys
     * @throws Exception when SQL issues
     */
    void dsUpdateRowsWithKey(String table,IColumn[] types, IColumn[] index,List<String> colnames, Collection<String> updatecolumns,
            List<String[]> rows, IAnonymization keys[],ArrayList<ArrayKey> keysbefore,String[][] keyswhere) throws Throwable;
    

    /**
     * Update with returned autogenerated value as key.
     *
     * @param colnames list of names
     * @param updatecolumns list of names
     * @param rows data
     * @param anonymization anonymization
     * @throws Exception when SQL issues
      */
    void dsUpdateRowsWithKeyAuto(String table,IColumn[] types, List<String> colnames, Collection<String> updatecolumns,
        List<String[]> rows, IAnonymization anonymization,ArrayList<ArrayKey> keysbefore) throws Exception;    
    
    /**
     * Count rows.
     *
     * @return number of rows
     * @throws Throwable 
     */
    int dsCountRows(String table) throws Throwable;
    
    /**
     * Inserts rows with a list of updatecolumns.
     *
     * @param updatecolumns list of names
     * @param rows of data
     * @throws Throwable 
      */
    void dsInsertRows(String table,IColumn[] columns, List<String> updatecolumns, List<String[]> rows) throws Throwable;

    
    
    void dsUndo() throws Exception;

    void dsCommit(String tname) throws Exception;
    
    void dsExecuteUpdate(String cmd) throws Exception;



    String dsPrintStatus();



    void dsInit() throws Exception;



    String dsPrintConnectionInfo();    
    
    
}
